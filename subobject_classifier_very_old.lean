import pullbacks

universes v u v‚ÇÇ u‚ÇÇ

open category_theory category_theory.category category_theory.limits 

variables {C : Type u} [category.{v} C]

/-- Define what it means for œá to classify the mono f. -/
abbreviation classifying {Œ© Œ©‚ÇÄ U X : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) (f : U ‚ü∂ X) (œá : X ‚ü∂ Œ©) := has_pullback_top f œá truth
/--
`is_subobject_classifier truth` holds if the morphism `truth : Œ©‚ÇÄ ‚ü∂ Œ©` is a subobject classifier,
i.e. that for any monomorphism `U ‚ü∂ X`, there is a unique morphism `X ‚ü∂ Œ©` forming a pullback
square.
Note we do not require `truth` to be a monomorphism here, nor that `Œ©‚ÇÄ` is terminal.
-/
structure is_subobject_classifier {Œ© Œ©‚ÇÄ : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) :=
(classifier_of : ‚àÄ {U X} (f : U ‚ü∂ X) [mono.{v} f], X ‚ü∂ Œ©)
(classifies' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f], classifying truth f (classifier_of f))
(uniquely' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f] (œá‚ÇÅ : X ‚ü∂ Œ©), classifying truth f œá‚ÇÅ ‚Üí classifier_of f = œá‚ÇÅ)

variable (C)

/--
A category has a subobject classifier if there is a monomorphism `truth` which is a
subobject classifier.
We do not require `Œ©‚ÇÄ` to be terminal, nor do we assume the existence of any limits.
-/
class has_subobject_classifier :=
(Œ© Œ©‚ÇÄ : C)
(truth : Œ©‚ÇÄ ‚ü∂ Œ©)
[truth_mono : mono.{v} truth]
(is_subobj_classifier : is_subobject_classifier truth)

variables [has_subobject_classifier.{v} C]

/-! Convenience interface to the `has_subobject_classifier` class. -/
namespace classifier

/-- Convenience notation for the classifier target given the typeclass `has_subobject_classifier`. -/
def Œ© : C := has_subobject_classifier.Œ©.{v}
/-- Convenience notation for the classifier source given the typeclass `has_subobject_classifier`. -/
def Œ©‚ÇÄ : C := has_subobject_classifier.Œ©‚ÇÄ.{v}
/-- Convenience notation for the classifier given the typeclass `has_subobject_classifier`. -/
def truth : Œ©‚ÇÄ C ‚ü∂ Œ© C := has_subobject_classifier.truth
/-- From the typeclass `has_subobject_classifier`, show that the classifier `truth` is a monomorphism. -/
instance truth_mono : mono (truth C) := has_subobject_classifier.truth_mono
/-- The subobject classifier given by `has_subobject_classifier` is actually a classifier. -/
def subobj_classifier_is_subobj_classifier : is_subobject_classifier (truth C) := has_subobject_classifier.is_subobj_classifier

variable {C}
def classifier_of {U X : C} (f : U ‚ü∂ X) [mono f] : X ‚ü∂ Œ© C :=
(subobj_classifier_is_subobj_classifier C).classifier_of f
def classifies {U X : C} (f : U ‚ü∂ X) [mono f] : classifying (truth C) f (classifier_of f) :=
(subobj_classifier_is_subobj_classifier C).classifies' f
lemma uniquely {U X : C} (f : U ‚ü∂ X) [mono f] (œá‚ÇÅ : X ‚ü∂ Œ© C) (hœá : classifying (truth C) f œá‚ÇÅ) : classifier_of f = œá‚ÇÅ :=
(subobj_classifier_is_subobj_classifier C).uniquely' f œá‚ÇÅ hœá

instance unique_to_Œ©‚ÇÄ (X : C) : unique (X ‚ü∂ Œ©‚ÇÄ C) := {
  default := (classifies (ùüô X)).top,
  uniq := begin
  intros, 
  rw [‚Üê cancel_mono (truth C), (classifies (ùüô X)).comm, id_comp, uniquely],
  let comm : a ‚â´ truth C = ùüô X ‚â´ (a ‚â´ truth C) := by simp,
  let pb_cone := pullback_cone.mk a (ùüô X) comm,
  suffices h : is_limit (pullback_cone.mk a (ùüô X) comm),
  { apply has_pullback_top_of_is_pb h },
  { apply is_limit.mk' pb_cone,
    intros, refine ‚ü® s.snd , _ ‚ü©,
    { split, simp, rw [‚Üê cancel_mono (truth C), s.condition], simp,
      split, simp, rw comp_id s.snd,
      intros m h1 h2, simp at h2, rw ‚Üê h2,symmetry, apply comp_id } },
  end
}

def Œ©‚ÇÄ_terminal : is_terminal (Œ©‚ÇÄ C) := is_terminal.of_unique (Œ©‚ÇÄ C).
 
end classifier

